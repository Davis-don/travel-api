// Prisma Schema
// Learn more at: https://pris.ly/d/prisma-schema

// --- GENERATORS ---
generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows"]
}

// --- DATASOURCE ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELS ---

// Main accommodation model
model Accommodation {
  id             String               @id @default(uuid())
  name           String
  description    String
  city           String
  county         String
  country        String
  circuit        String
  class          Int                  // Star rating (1-5)
  imgUrl         String               // URL to the image
  publicId       String               // Cloudinary public ID
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // Relations
  serviceLevel   ServiceLevel         @relation(fields: [serviceLevelId], references: [id], onDelete: Cascade)
  serviceLevelId String
  
  type           AccommodationType    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId         String

  rooms          AccommodationRoom[]
  amenities      AccommodationAmenity[]
}

// Accommodation classification types
model AccommodationType {
  id             String         @id @default(uuid())
  name           String         @unique  // e.g., Hotel, Hostel, Resort
  accommodations Accommodation[]
}

// Service level classification
model ServiceLevel {
  id             String         @id @default(uuid())
  name           String         @unique  // e.g., Full-Service, Limited-Service
  accommodations Accommodation[]
}

// Room types definition
model RoomType {
  id             String              @id @default(uuid())
  name           String              // e.g., Single Room, Double Room
  capacity       Int                 // Max occupancy
  rooms          AccommodationRoom[]
}

// Amenities definition
model Amenity {
  id             String              @id @default(uuid())
  name           String              @unique  // e.g., WiFi, Parking
  amenities      AccommodationAmenity[]
}

// Join table: Accommodation ↔ RoomType (Many-to-Many)
model AccommodationRoom {
  id              String         @id @default(uuid())
  accommodation    Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId  String
  roomType         RoomType      @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomTypeId       String

  @@unique([accommodationId, roomTypeId])
}

// Join table: Accommodation ↔ Amenity (Many-to-Many)
model AccommodationAmenity {
  id              String         @id @default(cuid())
  accommodation   Accommodation  @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String
  amenity         Amenity        @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId       String

  @@unique([accommodationId, amenityId])
}