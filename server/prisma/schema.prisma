// This is your Prisma schema file,
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accommodation {
  id             String           @id @default(uuid())
  name           String
  description    String
  city           String
  county         String
  country        String
  circuit        String
  class          Int              // Can be 1-5 for star rating
  serviceLevel   ServiceLevel     @relation(fields: [serviceLevelId], references: [id], onDelete: Cascade)
  serviceLevelId String
  type           AccommodationType @relation(fields: [typeId], references: [id], onDelete: Cascade) // One-to-one relation
  typeId         String
  imgUrl         String           // URL to the image
  publicId       String           // Cloudinary public ID

  rooms    AccommodationRoom[]
  amenities AccommodationAmenity[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model AccommodationType {
  id    String   @id @default(uuid())
  name  String   @unique // e.g., Hotel, Hostel, Resort
  accommodations Accommodation[] // Corrected for one-to-one relation via typeId in Accommodation
}

model ServiceLevel {
  id    String   @id @default(uuid())
  name  String   @unique // e.g., Full-Service, Limited-Service, Self-Catering
  accommodations Accommodation[]
}

model RoomType {
  id           String          @id @default(uuid())
  name         String          // e.g., Single Room, Double Room, Suite
  capacity     Int             // Max occupancy
  rooms        AccommodationRoom[]
}

model Amenity {
  id         String          @id @default(uuid())
  name       String          @unique // e.g., WiFi, Parking, Spa, Pool
  amenities  AccommodationAmenity[]
}

// Explicit join table for Accommodation-RoomType relationship
model AccommodationRoom {
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String
  roomType       RoomType @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  roomTypeId     String

  @@id([accommodationId, roomTypeId])
}

// Explicit join table for Accommodation-Amenity relationship
model AccommodationAmenity {
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String
  amenity        Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId      String

  @@id([accommodationId, amenityId])
}
